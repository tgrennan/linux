Ethernet multiplexor (xeth)
===========================

An xeth-mux device may use VLAN or VPLS encapsulation to multiplex virtual
ethernet devices that proxy loopbacks, port, lag, vlan, and bridges through one
or more iflinks to respective functions of an on-board or remote SWITCH.  Each
xeth-mux also has a companion daemon (aka. SWITCHD) that controls the SWITCH
through: vfio-pci; an alternate data link or encapsulation; or some other
means.  SWITCHD also has a sideband protocol with the xeth-mux through a
SEQPACKET, UNIX domain socket named @MUX.

	SWITCHD
	 |   |
	 |   |
	 |   |   virtuals
	 |   |   | .... |
	 |   |<->xeth-mux
	 |          ||
	 |          ||
	 |          ||
	 |<-----> SWITCH
	         | .... |
	           ports

Usage
-----

The xeth-mux and its port proxies may be created from an open-firmware matched
platform device with associated properties or through rtnl with iproute2.

	ip link add [NAME] [link DEV] type xeth-mux [encap <(vlan)|vpls>]
	ip link add [NAME] link XETH_MUX type xeth-port [xid XID]

The proxy loopback, lag, vlan, and bridge devices are created with iproute.

	ip link add [NAME] link XETH_MUX type xeth-loopback [channel ID]

	ip link add [NAME] link XETH_PORT type xeth-lag
	ip link set ANOTHER_XETH_PORT master XETH_LAG

	ip link add [NAME.VLAN] link XETH_PORT_OR_LAG type xeth-vlan [vid VID]

	ip link add [NAME] link XETH_PORT_LAG_OR_VLAN type xeth-bridge
	ip link set ANOTHER_XETH_PORT_LAG_OR_VLAN master XETH_BRIDGE

L2 Forwarding Offload
---------------------

The SWITCH offloads forwarding for all devices by default. Each device may
be configured to defer to Linux forwarding with:

	ethtool -K XETH_DEV l2-fwd-offload off

Exceptions
----------

The SWITCH may not be able to forward some frames like ARP requests, TTL=1 or
table missues. In such cases, SWITCHD can encapsulate and mark such frames
before forwarding through a raw socket to the xeth-mux that recognizes such
marks (e.g. vlan priority 7) to demux to the associated proxy device.

Link-less Mux
-------------

An xeth-mux may not have any lower links.

	ip link add [NAME] type xeth-mux [encap <(vlan)|vpls>]

In this case, all received frames are marked, encapsulated, exceptions
from SWITCHD and all proxy transmitted frames are encapsulated by
the xeth-mux and received by SWITCHD through the same raw socket.

This may be used to model a new switch, a network of switches, or connect
a SWITCHD to a remote SWITCH through a secure tunnel.

Side-band protocol
------------------

The xeth-mux provides the following information to SWITCHD:

	- proxy interface
	- FIB
	- neighbor entries

SWITCHD provide this to the xeth-mux:

	- port carrier state
	- port ethtool stats
	- proxy link stats 

On admin-up, the xeth-mux opens it's @NAME socket. SWITCHD connects to this
socket and begins with a DUMP_IFINFO request.

	SWITCHD              xeth-mux
	   |--- DUMP_IFINFO ---->|
	   |<-- XIFINFO ---------|
	   |    ...              |
	   |<-- BREAK -----------|
	   |--- DUMP_FIBINFO --->|
	   |<-- XFIBINFO --------|
	   |    ...              |
	   |<-- BREAK -----------|
	   |--- SPEED ---------->|
	   |--- CARRIER -------->|
	   |--- LINK_STAT ------>|
	   |--- ETHTOOL_STAT --->|
	   |    ...              |

In the above diagram, XIFINFO refers to the extended interface info for each
proxy device: IFINFO, ETHTOOL_FLAGS, IFA, IFA6, UPPER devs.

XFIBINFO refers to this extended forwarding info of each network: FIBENTRY,
FIB6ENTRY, NEIGH_UPDATE, NETNS_ADD/DEL.

After the BREAK reply to the DUMP_IFINFO request, the xeth-mux continues to
send FIB and interface updates while SWITCHD relays negotiated port speed,
carrier state, and periodic stats.

See <uapi/linux/xeth.h> for message definitions.

See <https://github.com/platinasystems/xeth> for a GO protocol handler and sample
SWITCHD.
